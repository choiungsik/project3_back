프로그램 실행 여부에 따른 테스트
정적테스트 : 실행하지않고 코드로 분석
동적테스트 : 실행해서 오류 찾기

테스트기반에 따른 테스트
명세기반 : 요구사항 명세를 모두 테스트 구현
구조기반 : 내부 논리흐름에 따라 테스트 구현
경험기반 : 테스터의 경험을 기반으로 테스트 구현

시각에 따른 테스트
검증(Verification) : 생산과정을 테스트
확인(Validation) : 생산된 제품결과를 테스트

목적에 따른 테스트
회복(Recovery) - 실패 후 잘 복구되는지
안전(Security) - 불법침입으로부터 잘 보호되는지
강도(Stress) - 과도한 정보에 정상적으로 작동하는지
성능(Performance) - 전체적인 효율성은 높은지
구조(Structure) - 구조적으로 논리적이고 복잡하지않은지
회귀(Regression) - 변경 또는 수정되었을 때 결함은 없는지
병행(Parallel) - 변경되었을 때 기존과 같은 값을 주면 어떻게 바뀌었는지

화이트박스테스트(White Box Test)
- 기초경로검사
- 제어구조검사(조건, 루프, 데이터흐름)

블랙박스테스트(Black Box Test)  - 오동경비원
- 오류 예측검사
- 동치분할
- 경계값분석
- 비교검사
- 원인/효과 그래프 검사

개발단계에 따른 테스트(테스트 전 소프트웨어 개발단계)
요분계구 단통시인
- 요구사항(Requirements)
- 분석(Specification)
- 설계(Design)
- 구현(Code)
- 단위테스트(Unit Testing) : 모듈이나 컴포넌트에 초점
- 통합테스트(Integration Testing) : 모듈을 결합해 통합시스템작성
> 하향식 : 종속모듈을 스텁(Stub)으로 대체
> 상향식 : 더미모듈을 드라이브(Drive)로 작성, 종속은 클러스터(Cluster) 그룹
- 시스템테스트(System Testing) : 만든 시스템 작동확인
- 인수테스트(Acceptance Testing) : 사용자 요구사항에 맞는지 확인
> 알파 : 사용자가 개발자 앞에서 테스트
> 베타 : 최종사용자가 여러 사용자 앞에서 테스트

테스트케이스 작성순서(확위요구정당 확실한 정권을 잡으려면 테스트가 필요)
- 계획검토 및 자료확보
- 위험평가 및 우선순위 결정
- 요구사항 정의
- 구조설계 및 방법결정
- 정의
- 타당성확인 및 유지보수

테스트오라클 종류
참 오라클
샘플링 오라클
추정 오라클
일관성검사 오라클

테스트자동화도구 - 사람이 아닌 스크립트로 자동테스트
장점 - 인력 및 시간감소, 일관성있는 검증가능
단점 - 자동화도구에 대한 교육필요, 만들기 위한 노력이 별도로 들어간다.

테스트자동화도구의 유형
- 정적분석도구
- 테스트실행도구
- 성능테스트도구
- 테스트통제도구
- 테스트하네스도구

결함(Fault) : 오류발생, 작동실패처럼 이상하게 작동하거나 다른 결과가 생기는 것

결함관리프로세스
- 결함관리계획
- 결함기록
- 결함검토
- 결함수정
- 결함재확인
- 결함상태 추적 및 모니터링 활동
- 최정결함분석 및 보고서 작성

결함추적순서
- 결함등록(open)
- 결함검토(reviewed)
- 결함할당(assigned)
- 결함수정(resolved)
- 결함조치보류(deferred)
- 결함종료(closed)
- 결함해제(clarified)

결함관리도구
- Mantis : 결함 및 이슈관리
- Trac : 결함추적 및 통합관리
- Redmine : 프로젝트관리 및 결함추적
- Bugzilla : 결함신고, 확인, 처리 등 지속적 관리

애플리케이션성능(응경(은경)처자가 성능을 알려준다)
- 응답시간(Response Time)
- 경과시간(Turn Around Time)
- 처리량(Throughput)
- 자원사용률(Resource Usage)

성능테스트도구
- JMeter - CrossPlatform 환경 프로토콜 지원
- LoadUI - CrossPlatform 환경 사용자편리성강화 
- OpenSTA - Windows 환경 프로토콜 지원

소스코드 최적화
클린코드(누구나 이해하는 쉽고 명료한 코드) <-> 나쁜코드

클린코드작성원칙(가중의단추가 생기면 무거운 나쁜코드가 된다)
가 : 가독성 - 누구나 쉽게 이해
중 : 중복성최소화 - 코드 중복을 최소화
의 : 의존성배제 - 다른 모듈에 미치는 영향최소화
단 : 단순성 - 간단하게 작성
추 : 추상화 - 상위클래스에서는 특성을, 하위클래스에서는 내용을 구현

소스코드 품질분석도구
정적분석도구
-pmd : 미사용변수, 최적화되지않는 코드 검사
-cppcheck : C언어에 대한 메모리누수, 오버플로우검사
-sonarQube : 중복코드, 복잡도, 코딩설계분석
-checkstyle : Java코드 검사
-ccm : 코드 복잡도 분석
-cobertura : Java코드 복잡도 분석
동적분석도구
-avalanche : 프로그램 결합 및 취약점 분석
-valgrind : 메모리 및 쓰레드 결합분석

